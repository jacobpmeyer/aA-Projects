"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TimeRange = /** @class */ (function () {
    function TimeRange() {
    }
    TimeRange.All = { start: 0, end: 23 };
    TimeRange.Day = { start: 9, end: 17 };
    TimeRange.Night = { start: 18, end: 23 };
    TimeRange.Morning = { start: 6, end: 11 };
    TimeRange.Afternoon = { start: 12, end: 17 };
    TimeRange.Evening = { start: 17, end: 21 };
    TimeRange.Midnight = { start: 0, end: 4 };
    return TimeRange;
}());
exports.TimeRange = TimeRange;
var Time = /** @class */ (function () {
    function Time(faker) {
        this.faker = faker;
    }
    Object.defineProperty(Time.prototype, "ALL", {
        get: function () {
            return 'ALL';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Time.prototype, "DAY", {
        get: function () {
            return 'DAY';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Time.prototype, "NIGHT", {
        get: function () {
            return 'NIGHT';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Time.prototype, "MORNING", {
        get: function () {
            return 'MORNING';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Time.prototype, "AFTERNOON", {
        get: function () {
            return 'AFTERNOON';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Time.prototype, "EVENING", {
        get: function () {
            return 'EVENING';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Time.prototype, "MIDNIGHT", {
        get: function () {
            return 'MIDNIGHT';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Time.prototype, "BETWEEN", {
        get: function () {
            return 'BETWEEN';
        },
        enumerable: true,
        configurable: true
    });
    Time.prototype.between = function (from, to, period) {
        if (period === void 0) { period = this.ALL; }
        var date = this.faker.Date.between(from, to);
        var time = period === this.BETWEEN
            ? date
            : new Date(date.getFullYear(), date.getMonth(), date.getDate(), this.faker.Number.between(this.rangeFor(period).start, this.rangeFor(period).end), this.faker.Number.between(0, 59), this.faker.Number.between(0, 59));
        return time;
    };
    Time.prototype.forward = function (days, period) {
        if (days === void 0) { days = 365; }
        if (period === void 0) { period = this.ALL; }
        var from = this.daysFromNow(1);
        var to = this.daysFromNow(days);
        var date = this.faker.Date.between(from, to);
        var range = this.rangeFor(period);
        var time = new Date(date.getFullYear(), date.getMonth(), date.getDate(), this.faker.Number.between(range.start, range.end), this.faker.Number.between(0, 59), this.faker.Number.between(0, 59));
        return time;
    };
    Time.prototype.backward = function (days, period) {
        if (days === void 0) { days = 365; }
        if (period === void 0) { period = this.ALL; }
        var from = this.daysFromNow(-days);
        var to = this.daysFromNow(-1);
        var date = this.faker.Date.between(from, to);
        var range = this.rangeFor(period);
        var time = new Date(date.getFullYear(), date.getMonth(), date.getDate(), this.faker.Number.between(range.start, range.end), this.faker.Number.between(0, 59), this.faker.Number.between(0, 59));
        return time;
    };
    Time.prototype.rangeFor = function (period) {
        switch (period) {
            case this.ALL:
                return TimeRange.All;
            case this.DAY:
                return TimeRange.Day;
            case this.NIGHT:
                return TimeRange.Night;
            case this.MORNING:
                return TimeRange.Morning;
            case this.AFTERNOON:
                return TimeRange.Afternoon;
            case this.EVENING:
                return TimeRange.Evening;
            case this.MIDNIGHT:
                return TimeRange.Midnight;
            default:
                throw new Error("invalid period: " + period);
        }
    };
    Time.prototype.daysFromNow = function (n) {
        var d = new Date();
        d.setDate(d.getDate() + n);
        return d;
    };
    return Time;
}());
exports.Time = Time;
