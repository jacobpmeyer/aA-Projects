"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var address_json_1 = __importDefault(require("../data/address.json"));
var Address = /** @class */ (function () {
    function Address(faker) {
        this.faker = faker;
    }
    Address.prototype.city = function () {
        var format = this.faker.Random.element(address_json_1.default.cities);
        return this.parse(this.faker, format);
    };
    Address.prototype.streetName = function () {
        var format = this.faker.Random.element(address_json_1.default.streetNames);
        return this.parse(this.faker, format);
    };
    Address.prototype.streetAddress = function () {
        var format = this.faker.Random.element(address_json_1.default.streetAddresses);
        return this.parse(this.faker, format);
    };
    Address.prototype.secondaryAddress = function () {
        var prefix = this.faker.Random.element(address_json_1.default.secondaryAddressPrefixes);
        var format = prefix + " ###";
        return this.parse(this.faker, format);
    };
    Address.prototype.buildingNumber = function () {
        return '' + this.faker.Number.between(100, 99999);
    };
    Address.prototype.zipCode = function (stateAbbreviation) {
        if (stateAbbreviation === void 0) { stateAbbreviation = ''; }
        var format = stateAbbreviation === ''
            ? this.faker.Random.element(address_json_1.default.postcodes)
            : address_json_1.default.postcodeByState[stateAbbreviation];
        return this.parse(this.faker, format);
    };
    Address.prototype.zip = function (stateAbbreviation) {
        if (stateAbbreviation === void 0) { stateAbbreviation = ''; }
        return this.zipCode(stateAbbreviation);
    };
    Address.prototype.postcode = function (stateAbbreviation) {
        if (stateAbbreviation === void 0) { stateAbbreviation = ''; }
        return this.zipCode(stateAbbreviation);
    };
    Address.prototype.timeZone = function () {
        return this.faker.Random.element(address_json_1.default.timeZones);
    };
    Address.prototype.streetSuffix = function () {
        return this.faker.Random.element(address_json_1.default.streetSuffixes);
    };
    Address.prototype.citySuffix = function () {
        return this.faker.Random.element(address_json_1.default.citySuffixes);
    };
    Address.prototype.cityPrefix = function () {
        return this.faker.Random.element(address_json_1.default.cityPrefixes);
    };
    Address.prototype.state = function () {
        return this.faker.Random.element(address_json_1.default.states);
    };
    Address.prototype.stateAbbr = function () {
        return this.faker.Random.element(address_json_1.default.stateAbbreviations);
    };
    Address.prototype.country = function () {
        return this.faker.Random.element(address_json_1.default.countries);
    };
    Address.prototype.countryCode = function () {
        return this.faker.Random.element(address_json_1.default.countryCodes);
    };
    Address.prototype.latitude = function () {
        return '' + (this.faker.Number.betweenF(0.0, 180.0) - 90);
    };
    Address.prototype.longitude = function () {
        return '' + (this.faker.Number.betweenF(0.0, 360.0) - 180);
    };
    Address.prototype.parse = function (faker, format) {
        var text = format
            .replace(/\{(\w+)\}/g, function (m) { return "{Address." + m.substring(1); })
            .replace(/#/, faker.Number.between(1, 9).toString());
        return faker.Fake.f(text);
    };
    return Address;
}());
exports.Address = Address;
