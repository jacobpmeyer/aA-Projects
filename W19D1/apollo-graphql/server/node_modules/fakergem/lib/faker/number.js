"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var number_helpers_1 = require("../utils/number-helpers");
var Number = /** @class */ (function () {
    function Number(faker) {
        this.faker = faker;
    }
    Number.prototype.number = function (digits) {
        if (digits === void 0) { digits = 10; }
        var num = '';
        if (digits > 1) {
            num = "" + this.nonZeroDigit();
            digits -= 1;
        }
        return parseInt(num + this.leadingZeroNumber(digits), 10);
    };
    Number.prototype.decimal = function (leftDigits, rightDigits) {
        if (leftDigits === void 0) { leftDigits = 5; }
        if (rightDigits === void 0) { rightDigits = 2; }
        return this.number(leftDigits) + "." + this.decimalPart(rightDigits);
    };
    Number.prototype.normal = function (mean, standardDeviation) {
        if (mean === void 0) { mean = 1; }
        if (standardDeviation === void 0) { standardDeviation = 1; }
        var theta = 2 * Math.PI * Math.random();
        var rho = Math.sqrt(-2 * Math.log(1 - Math.random()));
        var scale = standardDeviation * rho;
        return mean + scale * Math.cos(theta);
    };
    Number.prototype.hexadecimal = function (digits) {
        if (digits === void 0) { digits = 6; }
        return Array(digits)
            .fill(null)
            .map(function (_) { return number_helpers_1.between(0, 15).toString(16); })
            .join('');
    };
    Number.prototype.between = function (from, to) {
        if (from === void 0) { from = 1; }
        if (to === void 0) { to = 5000; }
        var min = Math.min(from, to);
        var max = Math.max(from, to);
        return number_helpers_1.between(min, max);
    };
    Number.prototype.betweenF = function (from, to) {
        if (from === void 0) { from = 1.0; }
        if (to === void 0) { to = 5000.0; }
        var min = Math.min(from, to);
        var max = Math.max(from, to);
        return number_helpers_1.betweenFloat(min, max);
    };
    Number.prototype.positive = function (from, to) {
        if (from === void 0) { from = 1.0; }
        if (to === void 0) { to = 5000.0; }
        var value = this.between(from, to);
        return value < 0 ? (value *= -1) : value;
    };
    Number.prototype.negative = function (from, to) {
        if (from === void 0) { from = -1.0; }
        if (to === void 0) { to = -5000.0; }
        var value = this.between(from, to);
        return value < 0 ? value : (value *= -1);
    };
    Number.prototype.digit = function () {
        return number_helpers_1.between(0, 9);
    };
    Number.prototype.nonZeroDigit = function () {
        return number_helpers_1.between(1, 9);
    };
    Number.prototype.decimalPart = function (digits) {
        var num = '';
        if (digits > 1) {
            num = "" + this.nonZeroDigit();
            digits -= 1;
        }
        return this.leadingZeroNumber(digits) + num;
    };
    Number.prototype.leadingZeroNumber = function (digits) {
        return Array(digits)
            .fill(null)
            .map(function (_) { return number_helpers_1.between(0, 9); })
            .join('');
    };
    return Number;
}());
exports.Number = Number;
