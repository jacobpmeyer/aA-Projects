"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var company_json_1 = __importDefault(require("../data/company.json"));
var text_helpers_1 = require("../utils/text-helpers");
var Company = /** @class */ (function () {
    function Company(faker) {
        this.faker = faker;
    }
    Company.prototype.name = function () {
        return this.parse(this.faker.Random.element(company_json_1.default.names));
    };
    Company.prototype.suffix = function () {
        return this.faker.Random.element(company_json_1.default.suffixes);
    };
    Company.prototype.catchPhrase = function () {
        var _this = this;
        return Array(3)
            .fill(null)
            .map(function (_, i) { return _this.faker.Random.element(company_json_1.default.buzzwords[i]); })
            .join(' ');
    };
    Company.prototype.buzzword = function () {
        return this.faker.Random.element(__spreadArrays(company_json_1.default.buzzwords[0], company_json_1.default.buzzwords[1], company_json_1.default.buzzwords[2]));
    };
    Company.prototype.bs = function () {
        var _this = this;
        return Array(3)
            .fill(null)
            .map(function (_, i) { return _this.faker.Random.element(company_json_1.default.bs[i]); })
            .join(' ');
    };
    Company.prototype.ein = function () {
        var _this = this;
        return Array(9)
            .fill(null)
            .map(function () { return _this.faker.Number.between(0, 9); })
            .join('')
            .replace(/(\d{2})(\d{7})/, '$1-$2');
    };
    Company.prototype.dunsNumber = function () {
        var _this = this;
        return Array(9)
            .fill(null)
            .map(function () { return _this.faker.Number.between(0, 9); })
            .join('')
            .replace(/(\d{2})(\d{3})(\d{4})/, '$1-$2-$3');
    };
    Company.prototype.logo = function () {
        var n = this.faker.Number.between(1, 14);
        return "https://pigment.github.io/fake-logos/logos/medium/color/" + n + ".png";
    };
    Company.prototype.swedishOrganisationNumber = function () {
        var base = parseInt([
            this.faker.Number.between(1, 9),
            this.faker.Number.between(0, 9),
            this.faker.Number.between(2, 9),
            this.faker.Number.number(6),
        ].join(''), 10);
        return "" + base + this.luhnAlgorithm(base);
    };
    Company.prototype.norwegianOrganisationNumber = function () {
        var mod11Check = null;
        var base = 0;
        while (mod11Check == null) {
            base = parseInt([this.faker.Random.element([8, 9]), text_helpers_1.leftPad(this.faker.Number.between(0, 10000000).toString(), 7, '0')].join(''), 10);
            mod11Check = this.mod11(base);
        }
        return "" + base + mod11Check;
    };
    Company.prototype.australianBusinessNumber = function () {
        var base = text_helpers_1.leftPad(this.faker.Number.between(0, 1000000000).toString(), 9, '0');
        var abn = ("00" + base).split('').map(function (x) { return parseInt(x, 10); });
        return "" + (99 - (this.abnChecksum(abn) % 89)) + base;
    };
    Company.prototype.profession = function () {
        return this.faker.Random.element(company_json_1.default.professions);
    };
    Company.prototype.parse = function (format) {
        var text = format.replace(/\{(\w+)\}/g, function (m) { return "{Company." + m.substring(1); });
        return this.faker.Fake.f(text);
    };
    Company.prototype.luhnAlgorithm = function (num) {
        var sum = 0;
        ("" + num)
            .split('')
            .map(function (x, i) { return (i % 2 === 0 ? parseInt(x, 10) * 2 : parseInt(x, 10)); })
            .forEach(function (i) { return ("" + i).split('').forEach(function (c) { return (sum += c.charCodeAt(0)); }); });
        return sum % 10 === 0 ? 0 : (sum / 10 + 1) * 10 - sum;
    };
    Company.prototype.mod11 = function (num) {
        var weight = [2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7];
        var sum = ("" + num)
            .split('')
            .reverse()
            .reduce(function (acc, val, index) {
            return (acc = '' + val.charCodeAt(0) * weight[index - 1]);
        });
        var remainder = parseInt(sum, 10) % 11;
        return 11 - remainder;
    };
    Company.prototype.abnChecksum = function (abn) {
        var weights = [10, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19];
        return weights.reduce(function (acc, val, index) { return (acc += val * abn[index]); }, 0);
    };
    return Company;
}());
exports.Company = Company;
