"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Placeholdit = /** @class */ (function () {
    function Placeholdit(faker) {
        this.SUPPORTED_FORMATS = ['png', 'jpg', 'gif', 'jpeg'];
        this.faker = faker;
    }
    Placeholdit.prototype.image = function (size, format, backgroundColor, textColor, text) {
        if (size === void 0) { size = '300x300'; }
        if (format === void 0) { format = 'png'; }
        if (backgroundColor === void 0) { backgroundColor = null; }
        if (textColor === void 0) { textColor = null; }
        if (text === void 0) { text = null; }
        if (!this.isValidSize(size)) {
            throw new Error('Size should be specified in format 300x300');
        }
        if (!this.isSupportedFormat(format)) {
            throw new Error("Supported formats are " + this.SUPPORTED_FORMATS.join(', '));
        }
        if (!this.isValidColorValue(backgroundColor)) {
            throw new Error("backgroundColor must be a hex value without '#'");
        }
        if (!this.isValidColorValue(textColor)) {
            throw new Error("textColor must be a hex value without '#'");
        }
        var url = "https://placehold.it/" + size + "." + format;
        if (backgroundColor) {
            url += "/" + backgroundColor;
        }
        if (textColor) {
            url += "/" + textColor;
        }
        if (text) {
            url += "?text=" + text;
        }
        return url;
    };
    Placeholdit.prototype.isValidSize = function (size) {
        return /^\d+x\d+$/.test(size);
    };
    Placeholdit.prototype.isSupportedFormat = function (format) {
        return this.SUPPORTED_FORMATS.indexOf(format) >= 0;
    };
    Placeholdit.prototype.isValidColorValue = function (color) {
        if (color) {
            return new RegExp(/(?:^[0-9a-f]{3}$)|(?:^[0-9a-f]{6}$)/.source, 'i').test(color);
        }
        return true;
    };
    return Placeholdit;
}());
exports.Placeholdit = Placeholdit;
