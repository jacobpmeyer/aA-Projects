"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var hipster_json_1 = __importDefault(require("../data/hipster.json"));
var lorem_json_1 = __importDefault(require("../data/lorem.json"));
var number_helpers_1 = require("../utils/number-helpers");
var text_helpers_1 = require("../utils/text-helpers");
var Hipster = /** @class */ (function () {
    function Hipster(faker) {
        this.faker = faker;
    }
    Hipster.prototype.word = function () {
        var item = this.faker.Random.element(hipster_json_1.default.words);
        return item.match(/\s/) ? this.word() : item; // Make sure we get a single word
    };
    Hipster.prototype.words = function (num, supplemental, spacesAllowed) {
        var _this = this;
        if (num === void 0) { num = 3; }
        if (supplemental === void 0) { supplemental = false; }
        if (spacesAllowed === void 0) { spacesAllowed = false; }
        var wordList = supplemental ? __spreadArrays(hipster_json_1.default.words, [lorem_json_1.default.words]) : hipster_json_1.default.words;
        var words = this.faker.Random.assortment(wordList, number_helpers_1.resolveNumber(num));
        return spacesAllowed ? words : words.map(function (x) { return (("" + x).match(/\s/) ? _this.word() : x); });
    };
    Hipster.prototype.sentence = function (wordCount, supplemental, randomWordsToAdd) {
        if (wordCount === void 0) { wordCount = 4; }
        if (supplemental === void 0) { supplemental = false; }
        if (randomWordsToAdd === void 0) { randomWordsToAdd = 6; }
        var words = this.words(number_helpers_1.resolveNumber(wordCount) + this.faker.Number.between(0, randomWordsToAdd), supplemental, true);
        var text = text_helpers_1.capitalize(words.join(' '));
        return text.length > 0 ? text + "." : text;
    };
    Hipster.prototype.sentences = function (sentenceCount, supplemental) {
        var _this = this;
        if (sentenceCount === void 0) { sentenceCount = 3; }
        if (supplemental === void 0) { supplemental = false; }
        return Array(number_helpers_1.resolveNumber(sentenceCount))
            .fill(null)
            .map(function (_) { return _this.sentence(3, supplemental); });
    };
    Hipster.prototype.paragraph = function (sentenceCount, supplemental, randomSentencesToAdd) {
        if (sentenceCount === void 0) { sentenceCount = 3; }
        if (supplemental === void 0) { supplemental = false; }
        if (randomSentencesToAdd === void 0) { randomSentencesToAdd = 3; }
        return this.sentences(number_helpers_1.resolveNumber(sentenceCount) + this.faker.Number.between(0, randomSentencesToAdd), supplemental).join(' ');
    };
    Hipster.prototype.paragraphs = function (paragraphCount, supplemental) {
        var _this = this;
        if (paragraphCount === void 0) { paragraphCount = 3; }
        if (supplemental === void 0) { supplemental = false; }
        return Array(number_helpers_1.resolveNumber(paragraphCount))
            .fill(null)
            .map(function (_) { return _this.paragraph(3, supplemental); });
    };
    return Hipster;
}());
exports.Hipster = Hipster;
